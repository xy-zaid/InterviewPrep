DSA 

2 Pointer technique

https://www.geeksforgeeks.org/two-pointers-technique

https://algodaily.com/lessons/using-the-two-pointer-technique/java

-------------------------------------------------------------------------------

Bit Manipulation 

  1. Basics of Bits 

   1.1 Binary Representation
      In computers, data is represented in binary format, consisting of only two digits: 0 and 1.
      Each binary digit is called a bit, which is the smallest unit of data storage.
      For example, the decimal number 5 is represented as 101 in binary, where each digit (1 or 0 or 1) is called a bit and represents a power of 2:
      1 * 2^2 + 0 * 2^1 + 1 * 2^0 = 5

  ------------------------------

  2. Bitwise Operators : Bitwise operators manipulate individual bits of binary numbers.
  
   2.1 Common Bitwise Operators in Java
    
    Bitwise AND (&):
    Performs a bitwise AND operation between corresponding bits of two operands.
    Result is 1 if both bits are 1, otherwise 0.

    Bitwise OR (|):
    Performs a bitwise OR operation between corresponding bits of two operands.
    Result is 1 if at least one of the bits is 1, otherwise 0.

    Bitwise XOR (^):
    Performs a bitwise XOR (exclusive OR) operation between corresponding bits of two operands.
    Result is 1 if the bits are different, otherwise 0.

    Bitwise NOT (~):
    Inverts all bits of a single operand.
    Changes 0 to 1 and 1 to 0.
    Binary representation of 5 -> 0000 0101.
    Applying the ~ operator to each bit of 0000 0101, we get -> 1111 1010.

    Left Shift (<<) Operator :
    The left shift operator (<<) shifts all bits in a binary number to the left by a specified number of positions.
    Syntax: num << n, where num is the value to be shifted, and n is the number of positions to shift.
    eg -> 5 << 2 will shift the bits two positions to the left,binary representation of 5 is 0000 0101 resulting in 0001 0100, which equals 20 in decimal.

    Right Shift (>>) Operator :
    The right shift operator (>>) shifts all bits in a binary number to the right by a specified number of positions.
    Syntax: num >> n, where num is the value to be shifted, and n is the number of positions to shift.
    eg -> 5 >> 1 will shift the bits one position to the right, resulting in 0000 0010, which equals 2 in decimal.

   2.2 Examples of Bitwise Operations
    Bitwise AND (&): 5 & 3 equals 1, because 0101 & 0011 = 0001.
    Bitwise OR (|):5 | 3 equals 7, because 0101 | 0011 = 0111.
    Bitwise XOR (^):5 ^ 3 equals 6, because 0101 ^ 0011 = 0110.
    Bitwise NOT (~):~5 equals -6 (in two's complement).
    Bitwise Left Shift (<<) operator: number << position means shifting the binary representation of the number to the left by positions, effectively multiplying num by 2^position.
    eg-> 1<<2 , binary representation is from 1 to 100. and the number 1 is multiplied by 2 to the power of position[ 2^position ]
         1 * 2^2 = 1*4 -> from 1 -> 4.
    Bitwise Right Shift (>>) operator: number >> position means shifting the binary representation of the number to the right by positions, effectively dividing the number by 2^position.
    eg-> 20>>2, then 20 is divided by 2^2 -> 20/2^2 = 20/4 = 5.
  
  --------------------------------------------

  Problems :

    1. " You have a 32-bit unsigned integer called 'num' and another integer called 'i'. 
      You need to perform the following operations on the 'num' integer based on the value of 'i':
      1. Get the bit value at the "i"th position of "num".
      2. Set the bit at the "i"th position of "num".( set bit meaning bit digit should be 1)
      3. Clear the bit at the "i"th position of "num".( changing the bit digit to 0)

     solution -> [1 << n] this is called bit masking.

      1. if ((num & (1 << (ith position - 1))) == 0) {
          the ith positionindex is -> 0
          } else the ith positionindex is -> 1
      2. num | (1 << (i - 1)) to set at the ith position
      3. num &  ~(1 << (i - 1)) to clear set at the ith posi
    
    _______________________________________

    2. " Given a number ‘N’ and a number ‘K’. Return true if ‘K’th bit of number is set, else return false. "

      sol -> using bit masking and '&' operator
        "  return (integer & (1 << (position - 1))) != 0; "

    ------------------------------------------

    3. Check if a number is odd or not

      sol -> binary representation of 5 is 101 and of 4 is 100
        101 -> (1 * 2^2) + (0 * 2^1) + (1 * 2^0) = 5 and 100 -> (1 * 2^2) + (0 * 2^1) + (0 * 2^0) = 4
        therefore for every odd number least significant bit[LSB] has to be 1 because that is the only bit digit that adds 1,
        so if lsb is 1 then integer is ODD otherwise EVEN.
        " (integer & 1)==0 "

    ------------------------------------------
      

    4. Check if a number is power of 2 or not

      sol -> binary representation of every power of 2 is as follows :
       2->10 , 4->100 , 8-> 1000 , 16-> 10000 
       and every integer just before the power of 2 is as follows : 
       1->1 , 3->11 , 7->111 , 15->1111 , 31->11111 
       " ( n & ( n - 1 ) ) " if this expression gives 0 , then integer is a power of 2.

    ------------------------------------------
      

    5. Count the number of set bits - " If 'N' is 4, then 1 has a binary representation of 1, 2 has a binary representation of 10,
       3 has a binary representation of 11 ,4 has a binary representation of 100 -> Hence number of set bits is 5."
     

      sol -> we can count sets in each number using '&' operator and bitmask -> " ((temp & (1)) != 0) " if this expression is not 0,
        then it means the bit is '1' so we will increment the count whenever this exp is satisfied and we right-shift a number temp by one position (temp = temp >> 1) so that we can traverse over each bit of that integer, we effectively divide temp by 2. This operation continues until temp becomes 0.
        so TC for counting sets of an integer is [logn] because we are dividing by 2.

        Now Second step is that we need to traverse the integer from n to 1, we can do this by looping or through recursion.

    ------------------------------------------
      
    
    6.  Set The Rightmost Unset Bit - " N = 5 Output: 7
        Explanation: The binary representation of 5 is 101. After setting the rightmost unset bit it becomes 111 which is 7. "

      sol -> we have two tasks here -

        First one is to traverse over each bit of the given integer through loop until each bit is traversed -> " temp = temp >> 1 " , and will break the loop when this exp fails -> "  temp > 0  "or when thr rightmost '0' bit is changed to '1'

        Second task is to validate at which index we have unset bit and we will use counter variable, we will increment the counter to store what index we are currently at, after each bit traversal we will increment it.
        The moment we get the first '0' individual bit, meaning when this exp -> " (temp & (1)) == 0) " satifies.  
        at that index, we will toggle the bit value to '1' " Number = Number | (1 << count - 1) " and break from the loop.
        Tc is logn because the while loop iterates through each bit of the input integer in decreasing power of 2

    ------------------------------------------
      
    
    7. Swap two numbers

      sol -> We will use XOR property here, which states if two operand are same it will cancel each other out and provide 0
        for eg 4^4=0 , 0^4=4 same noperands give 0 , and xor with 0 returns the same value.
        we have to input integers a and b -> a=a^b; 
        b=a^b -[here a  is a^b] -> b= a^b^b now as we know previously b and b will cancel each other and give 0 -> b=a^0, this will give b=a; a=a^b[ a= a^b and b = b ] therefore a= a^b^a, a will cancel each other out , hence a=b;

    ------------------------------------------
      
    
    8. " You are given two integers, ‘dividend’ and ‘divisor’.
        You are required to divide the integers without using multiplication, division, and modular operators. "

      sol -> we have to use Left shift operator here, as we know left shift operator num<<posi means multiplying number by 2^posi
        we will try to create our own multiplication table 
        for example -> 
        3<<0 = 3 [3 * 2^0] 
        3<<1 = 6 [3 * 2^1] 
        3<<2 = 12 [3 * 2^2] 
        3<<3 = 24 [3 * 2^3] , this will be our first objective to make use of << operator and create a multiplication table when desired.
        Now, if dividend is 10 and divisor is 3, therefore using above table we will see how which table we can use to decrease the dividendto less than divisor 3.
        so outer loop will be to iterate until " divisor <= dividend " and inner loop will check this condition ->
        "(dividend - (divisor << count)) >= 0" here we are iterating and validating that is there any value to be subtracted from dividend. 10-(3<<0) =10-3=7 , if this is valid then we will reduce the dividend value to 7(10-3) and again verify if 
        7-(3<<1)=7-6 is >= 0 and this goes on and on until we are not able to reduce our dividend.

        now comes the questionhow will you store quotient , so againwe will sue << operator.
        1<<0 = 1,1<<1=2,1<<3=6
        so quotient=quotient+(1<<count) 

    ------------------------------------------

======================================================================================================

Sorting 

  # if you increasing or decreasing in powers of 2 , it will be log N to base 2
    64 (N) -> 32 (N/2) -> 16 (N/4) -> 8 (N/8) -> 4 (N/16) -> 2 (N/32) -> 1 (N/64)
    64 is 2 ^6, log 8 base 2 gives 3, meaning how many times base should be multiplied with itself so that we get 8

  # If algo gives different Time Complexity for differnt inputs then it is input dependant(Bubble)
    eg- best case -O(n) , worst case 0(n^2)

  # If algo does not give different Time Complexity for differnt inputs then it is input independent(Selection, Merge )
    eg- best case -O(n^2) , worst case 0(n^2)

  ---------------------------------------

    Selection Soritng - 

        # Select a minimum value and swap with index whose value is less than the mnimumm
        # Left side is sorted with each iteration. 
        # elements are scanned and put to theor correct position at once, their posi will not change again

        # Unstable sort because if duplicate values are there in the array to be sorted, then the index of the
          first duplicate value will increase/change to more than the second duplicate value

          If first duplicate value is at 3rd position and second dup value is at 5th, then S.D.V will stay at 5th but F.D.V will be move to 6th index.

        # First iteration is to access each element of the array....and 
            for each of this iteration one more iteration will run for comparing the least value so that it can be swapped. therefore 0(n^2) for all case scenario

    --------------------------------------------
    
    Bubble Soritng - 

        # Pair(Bubble) comparison  and swap
        # will push the largest value to right hand side by PAIR comparison and with each iteration the unsorted array region will decrease.
        # We are exchanging adjacent positions here based on PAIR comparison and elements can again change their position.

        # Stable sort because if duplicate values are there in the array, then the index of the
          first duplicate value will remain same. Maintains the order.

          If first duplicate value is at 3rd position and second dup value is at 5th, then S.D.V will stay at 5th and F.D.V will stay at 3rd index.

        # First iteration is to access each element of the array except the last index....and 
            for each of this iteration one more iteration will run for comparing the PAIR so that it can be swapped. therefore 0(n^2) fro worst case scenario

        # But we can optimize or improve this algo by adding a swap flag after first iteration, after comparing PAIRS if swap flag is still false , it means that the array is sorted so we do not need to sort or traverse any further. this is best scenario where timecomplexity will be 0(n)

    --------------------------------------------------

    Merge Sorting -

        # Follows Post Order tree traversal only conceptually , In a post-order tree traversal, you typically visit the left subtree, then the right subtree, and finally the root node.This process doesn't involve traversing a tree data structure; instead, it operates directly on arrays.

        #Based on 2 different algos 
            (a) Binary partition using recursion
                    The array is recursively divided into into smaller subarrays untill the subarrays are of size 1 with base condition l<h
                    we will not create a sub array, we will just change the position for low , mid and high
                    mid= (l+h)/2
            (b) Merge two sorted List
                take two arrays left array and right using Arrays.copyOfRange(arr,InclusiveFrom,exclusiveTo)
                and compare the elements of the two array and add them accordingly into the original array.

        # Recursion tree
                            N 
                N/2                 N/2
            N/4      N/4    N/4             N/4
        N/N N/N  N/N  N/N  N/N N/N    N/N   N/N     **[UNTILL SIZE IS 1]

        at each level we are comparing and merging the array , it is of order 0(n) at each level.
        * adding N/2 + N/2 , ultimately we get N items to be compared, and in the same way for each level ultimately we are comparing N 
          items only, therefore it is of 0(n) at each level.

        # Height of this tree -

        N->N/2->N/4->...1 therefore TC is log(N)

        # N log(N) is the TC. 0(n) for merge and logn for recursion.
        # we use Merge sort in linked list because it does not requires Random access and for array we use Quick Sort

    ----------------------------------------------------------

    Quick Sorting - 

        #First Select A pivot , either the first element of array, last element , median or random element.

        # Partition the pivot element using 2 pointers and store at an index and this index will be its correct position according to the given order. We will not have to touch this element ever, so that all elements that are smaller will be at the left side and all larger elements will be at right side. 
        (these first 2 steps are to be taken care by a different method and while loop and return the pivot index)

        # inside Partition method we check using 2 pointers if there is any value which is greater and smaller from both polar ends and swap them untill 1st pointer crosses the second pointer which means that all values to left of that index is small, so we swap that index with the pivot value and return the index.

        ----------------------------------------------------------------------------

        # recursively call the left and right side of the pivot element and again partition it so that left side will be smaller and right side will be larger.


        # merge sort and quick sort both have same time complexity but Space complexity of MS is 0(n) and of QS is 0(1)
        # best and avg = 0(nlogN) , worst case = 0(N^2)

======================================================================================================

Arrays

    Easy :
     
     # Largest Element in an Array
        
       * Either use Arrays.stream or traverse over the array "max = Math.max(max, arr[i])"

      ------------------------

     # Second Largest Element in an Array 

        * traverse over the array, any number that is closest to the largest number is the number that was there before the new larger value is assigned to the max variable. therefore before adding the new larger value take the value that is to be removed and store in second largest.
        for example we are iterating an array [1234] around last iteration largest varibale will store 3 inside but when the condition -> arr[i] > large is satisfied , 4 will be added to it. therefore before "large = arr[i]" do this -> " second_large = large "
        
        second condition is when we have such an array -> 23915 , In this case we can see that 5 will come at the last iteration , so if we only use the first condition then we will not satisfy it and we will not get the correct second_large value.
        "arr[i] > second_large && arr[i] != large" this should be your second condition where it checks if the current value is gt second_large if true then check if thet value is large value or not, if satisfied then second_large = arr[i]. 0(n).

      --------------------------

     # Check if the array is sorted 

        * array is sorted in ascending order if current element is smaller than the preceding element.
        this will be our base condition , if this is not satisfied return false.
        if(currElement>precedingElement) is satisfied then we dont have to traverse over n times. we know the array is unsorted, we break out and optimize our code.

      ------------------------------

     # Remove duplicates from Sorted array
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (Given an integer array sorted in non-decreasing order, remove the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same. 
      If there are k elements after removing the duplicates, then the first k elements of the array should hold the final result. It does not matter what you leave beyond the first k elements.
      Return k after placing the final result in the first k slots of the array.)
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        * Brute force approach would be to use set data structure, so that no duplicates will be saved and we will get our noDuplicateArray . this requires two loops. so 0(n) +0(n) and space will be 0(n)

        * we can also do this in 0(n) and 0(1) space complexity by using 2 Pointer technique. The slow and fast 2 pointer approach will work fine here, 
        1st pointer will be duplicatePointer which will continuously traverse over the array.
        2nd pointer will be nonDuplicatePointer.

        we will compare the two pointers -> " arr[duplicatePointer] != arr[nonDuplicatePointer] "

        if condition is not true, duplicatePointer will increment through loop thereby signifying that the preceding vlaues are duplicate

        * if condition is false it means we are at an index where we have found a non duplicate value. so we will swap this element.
        but nonDuplicatePointer is still at 0th index, where should we store the latest non duplicate value ?
        if we remember the questionhas clearly mentioned that -> 'The relative order of the elements should be kept the same.'
        therefore for eg 111122 in this array the realtive order is that after 1 2 is coming. so we will have to store this nonDuplicate value that is *2* at the position after 1 -> 121122.
        so before storing the latest non duplicate value at nonDuplicatePointer. we should increment its index to 1st
        " nonDuplicatePointer++ "

        now the nonDuplicatePointer is pointing at the correct index, this way the relative order is also maintained. 
        " arr[nonDuplicatePointer] = arr[duplicatePointer] "

      ----------------------------------------

     # Left rotate an array by D places

        * From {1,2,3,4,5,6,7} to -> 3,4,5,6,7,1,2  if d=2. then we have to rotate the array to left by 2 places.

        if d=greater than n, d=14 then how many times should we rotate. obviously not 14 times.
        because the array after rotating 14 times will end up the same, so this will increasethe complexity.
        what is 14%7 0, thats exactly how many times we should rotate. if d= 16 then we should rotate 16%7= 2
        so before any operation we have to reassign the d places value to optimize our solution
        d=d%arr.length;

        The pattern we can see is that from 0th index to d-1 index(0,1) and dth index to n-1(3,4,5,6,7) index are two different parts.
        
        * First approach is to store these two parts in 2 different tmp array and then storing back to the original array.
        eg , here d=2, therefore in temp array we will store the second part i.e 3,4,5,6,7 at the start. 
            and after this we will store the first part of array 1,2.
            then we can store the values of our temp array into our original array  "arr[i] = temp[i]"
            
            time complexity of this approach is 0(n) but space complexity is 0(n)

        * Second aproach improves the space complexity to 0(1) 
        we an see an amazing pattern here. If we reverse the two parts and then reverse the whole array, we get our desired result
        1,2,3,4,5,6,7-> 12 and 34567 , lets rev both these two parts of the given array, 21 and 76543
        now lets see how they will look in array 2,1,7,6,5,4,3 
        lets reverse the whole array now 2,1,7,6,5,4,3 ->3,4,5,6,7,1,2 . we got the desired result.

        " // Reverse first elements from 0th to d-1
            Reverse(arr, 0, d-1);
          // Reverse last elements from dth to n-1
            Reverse(arr, d, n - 1);
          // Reverse whole array
            Reverse(arr, 0, n - 1); "

      ------------------------------------------------------

     # Move all Zeros to the end of the array : <<<<< Input: 1 ,0 ,2 ,3 ,0 ,4 ,0 ,1 Output: 1 ,2 ,3 ,4 ,1 ,0 ,0 ,0 >>>>>>>

        * Move all non zero values to the start. 

         we will use 2 Pointer slow and fast approach. 
         wherein first pointer i, which will be used to traverse the elements of the array and the second pointer j will store the index of FIRST ZERO ELEMENT. So we will assume that there is no zero element in the array therefore j=-1 at the start.

         we will traverse the array non stop exceptat the condition that the element at ith index is found to be non zero , so we will shhift that non zero element to the start.

         while traversing the array if this condition -> "if(arr[i]!=0)" i.e. element is non zero is satisfied then we will swap j and i index but before that we will increment j Pointer. 

        * 0(n) 

      ------------------------------------------------------------

     # Linear Search : <<<<< Input: arr[]= 1 2 3 4 5, num = 3 Output: 2 >>>>>>>

        * We will traverse the whole array and see if the element is present in the array or not and return the element if it is found

      ------------------------------------------------------------

     # Union of Two Sorted Arrays : <<<<< Input: n = 5,m = 5. arr1[] = {1,2,3,4,5}  arr2[] = {2,3,4,4,5}    Output: {1,2,3,4,5} >>>>>

        * First approach will be to use HashMap
         we will traverse both the array and store the elements as key and the count of that element as value inside HashMap
         this way we can get our desired list of union of two arrays with distinct values.
         But requirement was that the order should not be changed. but order is not maintained in HashMap, that is why we will have to use  SortedMap and since it is an interface we need to use TreeMap.
         Time complexity increased while using TreeMap, put method for HashMap was 0(1) but now for TreeMapit hasincreased to log n
         Inserting n elements from the arr array into the TreeMap has a time complexity of O(nlogn) because TreeMap maintains its elements in sorted order, and each insertion operation has a time complexity of O(logn).
         therefore overall time complexity of the method, therefore, becomes O(nlogn+mlogm).

        * Second Approach will be to reduce the time complexity to 0(n+m) and we will do that using 2 Pointers
          for each array there will be a pointer for traversal i and j.
          if ith element is smaller than j , just add that value to union array " tempArray.add(a[i]) "
          and increment i
          and if ith element is not smaller than j , just add jth index value value to union array " tempArray.add(b[j]) "
          and increment j

          while adding values validate if the value is already presnt or not in the list. " tempArray.contains(a[i]) "
          if it is not present then only add values 

          there will be a scenario when one array will be empty so add the second array's left element into union after validating if they're present or not.

      -----------------------------------------------------------------------

     # "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array."

        * Brute force approach - will take 2 loops using linear search. o(n^2)

        * Optimal Approach - we can use sum of first n numbers formula here. if the range is from 0->n .
          sum1 will store sum of first n numbers - "sum1=(length*(length+1))/2" and we will loop and calculate the sum of elements in the array. we will get the missing number by subtracting them. 0(n)

        * Optimal Approach - one more efficient approach will be to use XOR properties-> a^a=0 and 0^a=a.
          we will create a loop to traverse over the array and use xor property -> " xor = xor ^ arr[i] ^ i "
          if array is [103] , range is 0 to 3, xor=0^1 = (0^1)^(1^0) = (0^1)^(1^0)^(2^3).
          finally xor after cancelling each element out -> xor=2^3 .
          it seems there something missing in code because we have taken xor of each element till 3, but we have not taken xor of full length, since we will iterate till 3-1->2nd index. therefore after iterating variablei i will have the length stored in it so last important code  is -> "xor ^ i" we can also directly x=do xor of length because it is impossible for us to do xor of length inside loop. TC = 0(n)

        * we should go with xor approach becasue sum approach might be susceptible to integer overflow if the sum exceeds the maximum
          value representable by the data type.

      -----------------------------------------------------------------------

     # "Given an array 'a' of size 'n' and an integer 'k'.Find the length of the longest subarray of 'a' whose sum is equal to 'k'."
        Input: ‘n’ = 7 ‘k’ = 3 , ‘a’ = [1, 2, 3, 1, 1, 1, 1] Output: 3

        * Brute Force Approach:TC is 0(N^2) first loop will iterate each element and after calculating sum the ith index will increment,
          inner loop will start from ith index and go upto n-1 , will store the elements iteratively in sum variable and we will simultaneously validate if sum==k  if this is true then we calculate the length and store it in "maxLength = Math.max(maxLength, length) ", otherwise we will go on iteratin. but to optimize brute force as well, if sum is gt k then break from that indexes sum iteration because we only have positive integers here and no way will the sum decreaseto 'k'.

        * Optimal Approach :  this approach will deal with both Positive and -ve integers.
          for this approach we have to know what is prefix sum :
          input numbers	: 1	 2	 3	 4	 5	 6	
          prefix sums	: 1	 3	 6	10	15	21	, after every iteration we wil add the prefix sum to the current element.
          prefixSum=0, then in first iteration  prefixSum=0+1=1,2nd iteration -> prefixSum=1+2=3 and on and on.

          in each iteration we will save prefixSum as key and ith index as value in HashMap : map.put(prefixSum, index)
          except at that situation when prefixSum key is already there inside map : map.containsKey(prefixSum)
          the reason is that for example input is : [2, 2, 1, -1, 1, 2] and we have to check the longest subarray 
          so prefixSum at i=1 prefixSum=4 , so we are saving 4 as key and 1 as value that is the index but at 3rd index again prefixSum=4 if we again save in map then for 4 key value will be 3 that shortens the subarray which we dont want. and this happens because sum from index (1+1) to 3 is 0 that is why -> 
          if (!map.containsKey(sum)) {
                map.put(sum, i);
          }

          now second part is doing reverse mathematics, k is the required sum. 
          check "diffSum=prefixSum - k" to see if it is present in map of prefixSums : " map.containsKey(diffSum) ", if it is then we get the length of subarray [that sums to k] -> " length = i - map.get(diffSum) "
          if input arr is : [1, 2, 3, 1, 1, 1, 1]
          and at index 3 prefixSum=6. therefore lets check if 6-3=3 is present in map containing prefixSums with their index
          we can see that 3 with index 1 is stored in map, that means length of subarray is current index -prefix index =2-1=1

          while comparing and finding subarray is of given sum 'k' there is one corner case that if value with k is at the start index only then map.containsKey(diffSum) will return false but this is wrong so to counter these situations -
          1. [1 -1 3] 2. [30000] 3. [2 -1 1 1] in all such situations k is present at the ith index with all its left values cancellingeach other out and diffSum is not present in prefixSums map. we will have to check prefixSum 
          if (prefixSum == k) {
                length = i + 1;
            }

    -----------------------------------------------------------------------

    Medium : 
     
     # Two Sum
      1st variant: Return YES if there exist two numbers such that their sum is equal to the target. Otherwise, return NO.
                  N = 5, arr[] = {2,6,5,8,11}, target = 14 Result: YES

      2nd variant: Return indices of the two numbers such that their sum is equal to the target. Otherwise, we will return {-1, -1}.
                  N = 5, arr[] = {2,6,5,8,11}, target = 14 Result: [1, 3] 

                  **You may assume that each input would have exactly one solution, and you may not use the same element twice.
        
       * we will use Map DS here. 
        sum =i+x; in this case we know sum and ith index, we just have to check in map whether (sum-i) is present or not.
        code ->  if (map.containsKey(target - nums[i])) {
                    arr[0] = map.get(target - nums[i]);
                    arr[1] = i;
                    break;
                } 

      ----------------------------------
    
     # Sort an array of 0's 1's and 2's -> Input: nums = [2,0,2,1,1,0] Output: [0,0,1,1,2,2]
        
       * Brute Force Approach

      ----------------------------------

     # 
        
       * 

    -------------------------------------------------------------------------
    
    Hard : 
     
     # 
        
       * 

      ----------------------------------
    
     # 
        
       * 

      ----------------------------------

     # 
        
       * 

    -------------------------------------------------------------------------

    


         





    